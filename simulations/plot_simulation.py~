import numpy as np
import matplotlib.pyplot as plt
import pylab


if __name__ == "__main__":

    np.random.seed(0)

    n_samples = 50*5                               # number of observations
    p = 50                                         # dimension

    # Load sparse SPD matrix (for reproducibility)
    precision_true = np.load("precision_true_erdos_reyni.npy")
    #precision_true = prec_true
    #plt.imshow(prec_true)
    #plt.show()
    
    lambda_seq = np.linspace(0,1,6)
    lambda_seq = np.logspace(-3,-.5,10)
    rank_seq = np.unique(np.logspace(0.5,1.4,6).astype(int)) 
    error_seq = []
                           
    number_of_threads = -1              # to use the maximum number of threads
    Multi = True
    sample_seq = np.unique(np.logspace(1,2.5,5).astype(int))
    sample_seq = np.array([20, 50, 100, 200]) #n=[2*k, p, 2*p, 4*p]
    number_of_trials = 100

    δ_precision_sparsity = np.load("delta_lambda.npy")
    δ_precision_sparsity_GGFM = np.load("delta_sparsity_GGFM.npy")
    δ_precision_rank = np.load("delta_rank.npy")
    δ_precision_sparsity = np.round(δ_precision_sparsity, 4)

    labels = ["$n=p/2$", "$n=p$", "$n=2p$", "$n=4p$"]
    colors = ["b", "orange", "g", "red"]
    
    fig, ax = plt.subplots(1,3,figsize=(9,3))
    for i, n in enumerate(range(len(sample_seq))):
        delta_sparsity = np.mean(δ_precision_sparsity[:,:,n], axis=1)
        delta_rank = np.mean(δ_precision_rank[:,:,n], axis=1)
        ax[0].plot(lambda_seq, delta_sparsity,
                   marker='o', markersize=8, label=labels[n])
        ax[1].plot(rank_seq, delta_rank,
                   marker='o', markersize=8, label=labels[n])
        plt.text(rank_seq[-1]-4, delta_rank[-1]-0.015, f'{labels[n]}', color=colors[n])
        ax[2].plot(lambda_seq, np.mean(δ_precision_sparsity_GGFM[:,:,n], axis=1),
                   marker='o', markersize=8, label=labels[n])

    ax[0].set_title('$k=10$, $p=50$')
    ax[1].set_title('$\lambda=10^{-1}$, $p=50$')
    ax[0].set_xscale('log')
    ax[2].set_xscale('log')
    ax[0].set_xlabel('$\lambda$')
    ax[0].set_ylabel('Relative error')
    ax[1].set_xlabel('$k$')
    ax[1].set_ylabel('Relative error')
    #ax[1].legend(loc=0, ncols=2)
    plt.tight_layout()
    pylab.show()    
